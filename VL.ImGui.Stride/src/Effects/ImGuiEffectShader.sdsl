namespace VL.ImGui.Stride.Effects
{
    internal shader ImGuiEffectShader<bool TSRgb> : ShaderBase, PositionStream2, ColorBase, Texturing
    {
        matrix proj;

        override stage void VSMain() 
        {
            streams.ShadingPosition = mul(proj, float4(streams.Position2, 0.0, 1.0f)) + float4(-1.0f, 1.0f, 0.0f, 0.0f);

            if (TSRgb)
            {
                streams.Color = ColorUtility.SRgbToLinear(streams.Color);                
                float additionalAdjust = pow(streams.Color.a, 1.2);
                streams.Color.rgb *= additionalAdjust;
            }
        }

        override stage void PSMain() 
        {
            streams.ColorTarget = streams.Color * Texture0.Sample(LinearSampler, streams.TexCoord);
        }

        // Converts an srgb color to linear space. Alpha is treated the same. 
        // https://github.com/vvvv/VL.StandardLibs/issues/669#issuecomment-1984881266
        // orginal function from Stride ColorUtility shader (ToLinear & SRgbToLinear)
        // SRgbToLinear refers to https://chilliant.blogspot.com/2012/08/srgb-approximations-for-hlsl.html
        float4 ToLinearA(float4 sRGB)
        {
            return sRGB * (sRGB * (sRGB * 0.305306011 + 0.682171111) + 0.012522878);
        }

        // Converts a color from sRGB to linear. Alpha is treated the same
        // https://github.com/vvvv/VL.StandardLibs/issues/669#issuecomment-1984881266
        // orginal function from Stride ColorUtility shader, which refers to this: 
        // https://github.com/vvvv/VL.Stride/pull/395#issuecomment-760253956
        float4 SRgbToLinearPreciseA(float4 srgb)
        {
            float4 higher = pow((srgb + 0.055) / 1.055, 2.4);
            float4 lower = srgb / 12.92;
            float4 cutoff = step(srgb, 0.04045);
            return lerp(higher, lower, cutoff);
        }

        // simple screen gamma conversion. Alpha is treated the same
        float4 GammaToLinearA(float4 RGBa, float Gamma = 2.2)
        {
            return pow(RGBa, Gamma);
        }
    };
}